{"version":3,"sources":["assets/images/eye.png","assets/images/motion.jpg","assets/images/brain.jpg","assets/images/gesture.jpg","assets/images/voice.jpg","components/styles.ts","screens/Index/styles.ts","screens/Index/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Root","styled","div","_templateObject","nav","_templateObject2","h3","_templateObject3","_templateObject4","NavLink","_templateObject5","styles_templateObject","Row","styles_templateObject2","BaseItem","styles_templateObject3","Item","styles_templateObject4","EyeItem","styles_templateObject5","BrainItem","_templateObject6","VoiceItem","_templateObject7","GestureItem","_templateObject8","MotionItem","_templateObject9","IndexScreen","react","styles_Root","style","backgroundImage","concat","eyeImageSrc","brainImageSrc","voiceImageSrc","gestureImageSrc","motionImageSrc","history","createBrowserHistory","App","react_default","a","createElement","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,ywBCGjC,IAAMC,EAAOC,IAAOC,IAAVC,QAMKF,IAAOG,IAAVC,KAQQJ,IAAOK,GAAVC,KAISN,IAAOC,IAAVM,KAIPP,YAAOQ,IAAPR,CAAHS,2oCCtBb,IAAMV,EAAOC,IAAOC,IAAVS,KAMJC,EAAMX,IAAOC,IAAVW,KAKVC,EAAWb,IAAOC,IAAVa,KAYDC,EAAOf,IAAOC,IAAVe,KAMJC,EAAUjB,YAAOa,EAAPb,CAAHkB,KAIPC,EAAYnB,YAAOa,EAAPb,CAAHoB,KAKTC,EAAYrB,YAAOa,EAAPb,CAAHsB,KAITC,EAAcvB,YAAOa,EAAPb,CAAHwB,KAKXC,EAAazB,YAAOa,EAAPb,CAAH0B,0FCfRC,EA1Be,WAC5B,OACEC,EAAA,cAACC,EAAD,KACED,EAAA,cAACjB,EAAD,KACEiB,EAAA,cAACb,EAAD,KACEa,EAAA,cAACX,EAAD,CAASa,MAAO,CAAEC,gBAAe,OAAAC,OAASC,IAAT,SAEnCL,EAAA,cAACb,EAAD,KACEa,EAAA,cAACT,EAAD,CAAWW,MAAO,CAAEC,gBAAe,OAAAC,OAASE,IAAT,UAGvCN,EAAA,cAACjB,EAAD,KACEiB,EAAA,cAACb,EAAD,KACEa,EAAA,cAACP,EAAD,CAAWS,MAAO,CAAEC,gBAAe,OAAAC,OAASG,IAAT,SAErCP,EAAA,cAACb,EAAD,KACEa,EAAA,cAACL,EAAD,CAAaO,MAAO,CAAEC,gBAAe,OAAAC,OAASI,IAAT,SAEvCR,EAAA,cAACb,EAAD,KACEa,EAAA,cAACH,EAAD,CAAYK,MAAO,CAAEC,gBAAe,OAAAC,OAASK,IAAT,YCrBxCC,EAAUC,cAkBDC,EAhBO,WACpB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQN,QAASA,GACfG,EAAAC,EAAAC,cAAC5C,EAAD,KAOE0C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,OCPrBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39a37cac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eye.c0d3a36b.png\";","module.exports = __webpack_public_path__ + \"static/media/motion.32712e19.jpg\";","module.exports = __webpack_public_path__ + \"static/media/brain.047bf014.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gesture.478cd944.jpg\";","module.exports = __webpack_public_path__ + \"static/media/voice.d97e36b7.jpg\";","import styled from \"styled-components\";\nimport {NavLink} from \"react-router-dom\";\n\nexport const Root = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Navbar = styled.nav`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: #2a2a2a;\n  color: whitesmoke;\n`;\n\nexport const NavbarTitle = styled.h3`\n  padding: 5px;\n`;\n\nexport const NavItemsContainer = styled.div`\n  margin: 0 20px;\n`;\n\nexport const NavItem = styled(NavLink)`\n  color: whitesmoke;\n  text-decoration: none;\n`;","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Root = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Row = styled.div`\n  flex: 1;\n  display: flex;\n`;\n\nconst BaseItem = styled.div`\n  flex: 1;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  transition: transform 0.3s ease-in-out;\n  \n  &:hover {\n    transform: scale(1.2);\n  }\n`;\n\nexport const Item = styled.div`\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n`;\n\nexport const EyeItem = styled(BaseItem)`\n  //background-color: red;\n`;\n\nexport const BrainItem = styled(BaseItem)`\n  //background-color: green;\n  background-color: white;\n`;\n\nexport const VoiceItem = styled(BaseItem)`\n  background-color: blue;\n`;\n\nexport const GestureItem = styled(BaseItem)`\n  background-color: yellow;\n`;\n\n\nexport const MotionItem = styled(BaseItem)`\n  background-color: purple;\n`;\n","import * as React from \"react\";\nimport {BrainItem, EyeItem, GestureItem, Item, MotionItem, Root, Row, VoiceItem} from \"./styles\";\n\nimport eyeImageSrc from \"../../assets/images/eye.png\";\nimport motionImageSrc from \"../../assets/images/motion.jpg\";\nimport brainImageSrc from \"../../assets/images/brain.jpg\";\nimport gestureImageSrc from \"../../assets/images/gesture.jpg\";\nimport voiceImageSrc from \"../../assets/images/voice.jpg\";\n\nconst IndexScreen: React.FC = () => {\n  return (\n    <Root>\n      <Row>\n        <Item>\n          <EyeItem style={{ backgroundImage: `url(${eyeImageSrc})` }}></EyeItem>\n        </Item>\n        <Item>\n          <BrainItem style={{ backgroundImage: `url(${brainImageSrc})` }}></BrainItem>\n        </Item>\n      </Row>\n      <Row>\n        <Item>\n          <VoiceItem style={{ backgroundImage: `url(${voiceImageSrc})` }}></VoiceItem>\n        </Item>\n        <Item>\n          <GestureItem style={{ backgroundImage: `url(${gestureImageSrc})` }}></GestureItem>\n        </Item>\n        <Item>\n          <MotionItem style={{ backgroundImage: `url(${motionImageSrc})` }}></MotionItem>\n        </Item>\n      </Row>\n    </Root>\n  )\n};\n\nexport default IndexScreen;","import React from 'react';\nimport {Navbar, NavbarTitle, NavItem, NavItemsContainer, Root} from \"./styles\";\nimport {Route, Router} from \"react-router\";\nimport {createBrowserHistory} from 'history'\nimport IndexScreen from \"../screens/Index\";\nimport eyeImgSrc from \"../assets/images/eye.png\";\n\nconst history = createBrowserHistory();\n\nconst App: React.FC = () => {\n  return (\n    <Router history={history}>\n      <Root>\n        {/*<Navbar>*/}\n        {/*  <NavbarTitle>Advanced Usability: Opdracht A</NavbarTitle>*/}\n        {/*  <NavItemsContainer>*/}\n        {/*    <NavItem to=\"/\">Home</NavItem>*/}\n        {/*  </NavItemsContainer>*/}\n        {/*</Navbar>*/}\n        <Route exact path=\"/\" component={IndexScreen}/>\n      </Root>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}